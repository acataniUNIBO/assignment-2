/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package classReportPackage;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.List;

import com.github.javaparser.StaticJavaParser;
import com.github.javaparser.ast.CompilationUnit;
import com.github.javaparser.ast.body.ClassOrInterfaceDeclaration;
import com.github.javaparser.ast.body.MethodDeclaration;
import com.github.javaparser.ast.visitor.VoidVisitor;
import com.github.javaparser.ast.visitor.VoidVisitorAdapter;

public class App {
    public static void main(String[] args) throws FileNotFoundException {

        String filePath = args[0];      
        //String filePath =  System.getProperty("user.dir") + "/Car.java"; //creo il path del file Car.java che ha 3 classi
        
        List<String> classes = new ArrayList<>(); //arrayList di classi che verranno trovate nel file
        List<String> methods = new ArrayList<>(); //arrayList di metodi che verranno trovate nel file

        VoidVisitor<List<String>> methodCollectorVisitor = new MethodCollector(); //Creo un oggetto di tipo METHODCollector (implementazione sotto) che può visitare i metodi delle classi
        VoidVisitor<List<String>> classCollectorVisitor = new ClassCollector(); //Creo un oggetto di tipo ClassCollector (implementazione sotto) che può visitare le classi
        
        CompilationUnit cu = StaticJavaParser.parse(new File(filePath)); // parsing delle classi da oggetto statico StaticJavaParser, l'output è un CompilationUnit da visitare con il VoidVisitor per ottenere le classi

        classCollectorVisitor.visit(cu, classes); // visito le classi col VoidVisitor inizializzato sopra e le inserisco nell'arrayList dichiarato sopra ("classes")
        methodCollectorVisitor.visit(cu, methods); // visito le classi col VoidVisitor inizializzato sopra e le inserisco nell'arrayList dichiarato sopra ("classes")
                   
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("Classi: " + classes + "\n"); // stampo le classi trovate
        stringBuilder.append("Source path: " + filePath + "\n"); // stampo le classi trovate
        stringBuilder.append("Metodi: " + methods); // stampo le metodi trovati

        System.out.println(stringBuilder);
    }

    
    
}

class ClassCollector extends VoidVisitorAdapter<List<String>> {
    @Override
    public void visit(ClassOrInterfaceDeclaration cl, List<String> collector) {
        if (!cl.isInterface()) {
            super.visit(cl, collector);
            collector.add(cl.getNameAsString());
        }
    }
}


class MethodCollector extends VoidVisitorAdapter<List<String>> {
    @Override
    public void visit(MethodDeclaration md, List<String> collector) {
        super.visit(md, collector);
        collector.add(md.getNameAsString());
    }
}

